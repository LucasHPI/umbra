name: Node Lambdas Deploy

on:
  push:
    branches:
      - devl
    paths:
      - node/**

permissions:
  id-token: write
  contents: read

env:
  env_name: "devl"

jobs:
  GetUniqueIdentifier:
    runs-on: [ubuntu-latest]
    outputs:
      timestamp: ${{ steps.set-unique-identifier.outputs.timestamp }}
      env_name: ${{ env.env_name }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Unique Identifier Variable
        id: set-unique-identifier
        run: |
          echo "::set-output name=timestamp::$(date +%Y%m%d%H%M%S)"

  Setup:
    runs-on: [ubuntu-latest]
    outputs:
      lambda-matrix: ${{ steps.set-matrix-lambda.outputs.matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: List Folders
        id: set-matrix-lambda
        working-directory: node
        run: |
          arr="["; for i in $(ls -d *); do arr="$arr\"$i\","; done; arr="${arr::-1}]"
          echo $arr
          echo "::set-output name=matrix::$arr"

  BuildNode:
    runs-on: [ubuntu-latest]
    needs: [GetUniqueIdentifier, Setup]
    outputs:
      zip-path: ${{ steps.create-zip.outputs.zip-path }}
    strategy:
      matrix:
        lambdas: ${{ fromJson(needs.Setup.outputs.lambda-matrix) }}
    defaults:
      run:
        working-directory: node/${{ matrix.lambdas }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with: 
          node-version: '18'

      - name: Show Environment
        run: echo "Building for ${{ env.env_name }}"

      - name: Transpiling and Building
        run: |
          lambdaName=$(basename "${{ matrix.lambdas }}")

          cd src
          npm install
          npm run build
          cd ..

      - name: Creating dist and zipping
        run: |
          mkdir dist &&\
          cp -r src/*.js dist/ &&\

          cd dist &&\
          find . -name "*.zip" -type f -delete && \
          zip -r ../${{ matrix.lambdas }}-${{ needs.GetUniqueIdentifier.outputs.timestamp }}.zip . &&\
          cd .. && \
          rm -rf dist
          mv ./${{ matrix.lambdas }}-${{ needs.GetUniqueIdentifier.outputs.timestamp }}.zip $GITHUB_WORKSPACE/
        
      - name: Uploading Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.lambdas }}-${{ needs.GetUniqueIdentifier.outputs.timestamp }}.zip
          path: ${{ matrix.lambdas }}-${{ needs.GetUniqueIdentifier.outputs.timestamp }}.zip
  
  Terraform:
    runs-on: [ubuntu-latest]
    needs: [GetUniqueIdentifier, Setup, BuildNode]
    env: 
      TF_VAR_environment_name: ${{ needs.GetUniqueIdentifier.outputs.env_name }}
      TF_VAR_execution_role: ${{ secrets.IAM_ROLE }}
    strategy:
      matrix:
        lambdas: ${{ fromJson(needs.Setup.outputs.lambda-matrix) }}
    defaults:
      run:
        working-directory: node/${{ matrix.lambdas }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Assume IAM role
        id: assume-role
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.IAM_ROLE }}
          aws-region: us-east-1
          role-duration-seconds: 1200

      - name: Downloading Artifacts
        uses: actions/download-artifact@v2
        with: 
          name: ${{ matrix.lambdas }}-${{ needs.GetUniqueIdentifier.outputs.timestamp }}.zip
          path: node/${{ matrix.lambdas }}

      - name: Terraform Init
        run: |
          terraform init -backend-config "bucket=parallax-umbra-terraform-state-${{ env.env_name }}" -backend-config "dynamodb_table=parallax-umbra-terraform-lock-${{ env.env_name }}"

      - name: Terraform Validate
        run: |
          terraform validate

      - name: Terraform Plan
        run: |
          terraform plan --out=tfplan -var lambdas_version="${{ needs.GetUniqueIdentifier.outputs.timestamp }}"

      - name: Terraform Apply
        run: |
          terraform apply "tfplan"
